NestedScrollingParent与NestedScrollingChild两个接口方法 调用顺序

1.child -->onTouchEvent() -->MotionEvent.ACTION_DOWN
    -->child.startNestedScroll(int axes)
    -->child.isNestedScrollingEnabled() //是否支持嵌套滑动
    -->ViewParentCompat.onStartNestedScroll(p, child, this.mView, axes, type)
    -->parent.onStartNestedScroll(child, target, nestedScrollAxes, type)
    -->parent.onNestedScrollAccepted(child, target, nestedScrollAxes);

2.child -->onTouchEvent() -->MotionEvent.ACTION_MOVE
    -->child.dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow)
    -->ViewParentCompat.onNestedPreScroll(parent, this.mView, dx, dy, consumed, type)
    -->parent.onNestedPreScroll(target, dx, dy, consumed)
3.if(child.dispatchNestedPreScroll) -->true
  -->child.dispatchNestedScroll
  -->ViewParentCompat.onNestedScroll(parent, this.mView, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, type)
  -->parent.onNestedScroll(target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed)

    private void scrollNested(int x, int y) {
            //子控件处理事件
            childScroll(consumedX, consumedY);
            //子控件处理后，又将剩下的事件传递给父控件
            if (!dispatchNestedScroll(consumedX, consumedY, unConsumedX, unConsumedY, mScrollOffset)) {
                //传给父控件处理后，剩下的逻辑自己实现
            }
            //传递给父控件，父控件不处理，那么子控件就继续处理。
            childScroll(unConsumedX, unConsumedY);
   }
4.child -->onTouchEvent() -->MotionEvent.ACTION_UP|MotionEvent.ACTION_CANCEL
    -->child.stopNestedScroll()
    -->ViewParentCompat.onStopNestedScroll(parent, this.mView, type)
    -->parent.onStopNestedScroll(target)